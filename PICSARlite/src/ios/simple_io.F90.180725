! ________________________________________________________________________________________
!
! *** Copyright Notice ***
!
! “Particle In Cell Scalable Application Resource (PICSAR) v2”, Copyright (c)
! 2016, The Regents of the University of California, through Lawrence Berkeley
! National Laboratory (subject to receipt of any required approvals from the
! U.S. Dept. of Energy). All rights reserved.
!
! If you have questions about your rights to use or distribute this software,
! please contact Berkeley Lab's Innovation & Partnerships Office at IPO@lbl.gov.
!
! NOTICE.
! This Software was developed under funding from the U.S. Department of Energy
! and the U.S. Government consequently retains certain rights. As such, the U.S.
! Government has been granted for itself and others acting on its behalf a
! paid-up, nonexclusive, irrevocable, worldwide license in the Software to
! reproduce, distribute copies to the public, prepare derivative works, and
! perform publicly and display publicly, and to permit other to do so.
!
! SIMPLE_IO.F90
!
! This file contains subroutines for Picsar outputs.
!
! Developers:
! Henri Vincenti
! Mathieu Lobet
!
! Date:
! Creation 2015
! ________________________________________________________________________________________

! ________________________________________________________________________________________
!> @brief
!> This module contains subroutines for the outputs.
!
!> @author
!> Henri Vincenti
!
!> @date
!> Creation 2015
! ________________________________________________________________________________________
MODULE simple_io

  USE mpi_derived_types
  USE fields
  USE shared_data
  IMPLICIT NONE

  CONTAINS

! ________________________________________________________________________________________
!> @brief
!> This subroutine writes a grid quantity (e.g EM fields, Currents)
!> to disk using MPI-IO
!
!> @author
!> Henri Vincenti
!> Mathieu Lobet
!
!> @date
!> Creation 2015
!
!> @param[in] filename name of the file
!> @param[in] array the array to be output
!> @param[in] nxg guard cells in x
!> @param[in] nyg guard cells in y
!> @param[in] nzg guard cells in z
!> @param[in] nx_local local size in x
!> @param[in] ny_local local size in y
!> @param[in] nz_local local size in z
!> @param[in] offset offset for the header
!> @param[inout] err error parameter
!
! ________________________________________________________________________________________
SUBROUTINE write_single_array_to_file(filename, array, nxg, nyg, nzg, nx_local,       &
  ny_local, nz_local, offset, err)
  CHARACTER(LEN=*), INTENT(IN)              :: filename
  INTEGER(idp), INTENT(IN)                  :: nxg, nyg, nzg
  INTEGER(idp), INTENT(IN)                  :: nx_local, ny_local, nz_local
  REAL(num), DIMENSION(-nxg:nx_local+nxg, -nyg:ny_local+nyg, -nzg:nz_local+nzg),      &
  INTENT(IN OUT) :: array
  INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset
  INTEGER(isp), INTENT(INOUT)               :: err
  INTEGER(isp)                              :: subt, suba, fh

  CALL MPI_FILE_OPEN(comm, TRIM(filename), MPI_MODE_CREATE + MPI_MODE_WRONLY,         &
  MPI_INFO_NULL, fh, errcode)


  IF (errcode .NE. 0) THEN
    IF (rank .EQ. 0) PRINT *, 'file ', TRIM(filename), 'could not be created - Check  &
    disk space'
    err = IOR(err, c_err_bad_value)
    RETURN
  ENDIF

  subt = create_current_grid_derived_type()
  suba = create_current_grid_subarray(nxg, nyg, nzg)


  CALL MPI_FILE_SET_VIEW(fh, offset, MPI_BYTE, subt, 'native', MPI_INFO_NULL,         &
  errcode)


  CALL MPI_FILE_WRITE_ALL(fh, array, 1_isp, suba, MPI_STATUS_IGNORE, errcode)


  CALL MPI_FILE_CLOSE(fh, errcode)
  CALL MPI_TYPE_FREE(subt, errcode)

END SUBROUTINE write_single_array_to_file

! ________________________________________________________________________________________
!> @brief
!> This subroutine dumps the particle properties in a file.
!>
!> @author
!> Henri Vincenti
!
!> @date
!> Creation 2015
! ________________________________________________________________________________________
SUBROUTINE get_particles_to_dump(idump, mask, narr, ndump)
  USE constants
  USE particles
  USE tiling
  USE output_data

  INTEGER(idp), INTENT(IN) :: idump, narr
  INTEGER(idp), INTENT(IN OUT) :: ndump
  LOGICAL(lp), DIMENSION(narr), INTENT(IN OUT) :: mask
  INTEGER(idp) :: ix, iy, iz, count, ip
  TYPE(particle_species), POINTER :: curr
  TYPE(particle_dump), POINTER :: dp
  TYPE(particle_tile), POINTER :: curr_tile
  REAL(num) :: partx, party, partz, partux, partuy, partuz
  ndump = 0
  mask = .FALSE.

  dp => particle_dumps(idump)
  curr => species_parray(dp%ispecies)
  DO iz=1, ntilez
    DO iy=1, ntiley
      DO ix=1, ntilex
        curr_tile=>curr%array_of_tiles(ix, iy, iz)
        count=curr_tile%np_tile(1)
        IF (count .EQ. 0) THEN
          CYCLE
        ELSE
          DO ip = 1, count
            partx= curr_tile%part_x(ip)
            party= curr_tile%part_y(ip)
            partz= curr_tile%part_z(ip)
            partux= curr_tile%part_ux(ip)
            partuy= curr_tile%part_uy(ip)
            partuz= curr_tile%part_uz(ip)
            IF ((partx .GT. dp%dump_x_min) .AND. (partx .LT. dp%dump_x_max) .AND.     &
            (party .GT. dp%dump_y_min) .AND. (party .LT. dp%dump_y_max) .AND. (partz  &
            .GT. dp%dump_z_min) .AND. (partz .LT. dp%dump_z_max) .AND. (partux .GT.   &
            dp%dump_ux_min) .AND. (partux .LT. dp%dump_ux_max) .AND. (partuy .GT.     &
            dp%dump_uy_min) .AND. (partuy .LT. dp%dump_uy_max) .AND. (partuz .GT.     &
            dp%dump_uz_min) .AND. (partuz .LT. dp%dump_uz_max)) THEN
            ndump = ndump+1
            mask(ip) = .TRUE.
          ENDIF
        END DO
      ENDIF
    END DO
  END DO
END DO!END LOOP ON TILES

END SUBROUTINE get_particles_to_dump

! ________________________________________________________________________________________
!> @brief
!> This subroutine creates a new array of particles (narr)
!> from the current particle array (arr) and a list of flags (mask) for filtering.
!>
!> @author
!> Henri Vincenti
!
!> @date
!> Creation 2015
! ________________________________________________________________________________________
SUBROUTINE concatenate_particle_variable(idump, var, arr, narr, mask, nmask)
USE particles
USE constants
USE tiling
INTEGER(idp), INTENT(IN) :: idump, narr, var, nmask
LOGICAL(lp), DIMENSION(nmask), INTENT(IN) :: mask
REAL(num), DIMENSION(narr), INTENT(IN OUT) :: arr
INTEGER(idp) :: ix, iy, iz, count, ncurr, np, ip
TYPE(particle_species), POINTER :: curr
TYPE(particle_tile), POINTER :: curr_tile
TYPE(particle_dump), POINTER :: dp
ncurr = 0
np = 0

dp => particle_dumps(idump)
curr => species_parray(dp%ispecies)
DO iz=1, ntilez
  DO iy=1, ntiley
    DO ix=1, ntilex
      curr_tile=>curr%array_of_tiles(ix, iy, iz)
      count=curr_tile%np_tile(1)
      IF (count .EQ. 0) THEN
        CYCLE
      ELSE
        SELECT CASE (var)
        CASE (1)! x
          DO ip=1, count
            np = np+1
            IF (mask(np)) THEN
              arr(ncurr+1) = curr_tile%part_x(ip)
              ncurr = ncurr+1
            END IF
          END DO
        CASE (2)! y
          DO ip=1, count
            np = np+1
            IF (mask(np)) THEN
              arr(ncurr+1) = curr_tile%part_y(ip)
              ncurr = ncurr+1
            END IF
          END DO
        CASE (3)! z
          DO ip=1, count
            np = np+1
            IF (mask(np)) THEN
              arr(ncurr+1) = curr_tile%part_z(ip)
              ncurr = ncurr+1
            END IF
          END DO
        CASE (4)! ux
          DO ip=1, count
            np = np+1
            IF (mask(np)) THEN
              arr(ncurr+1) = curr_tile%part_ux(ip)
              ncurr = ncurr+1
            END IF
          END DO
        CASE (5)! uy
          DO ip=1, count
            np = np+1
            IF (mask(np)) THEN
              arr(ncurr+1) = curr_tile%part_uy(ip)
              ncurr = ncurr+1
            END IF
          END DO
        CASE (6)! uz
          DO ip=1, count
            np = np+1
            IF (mask(np)) THEN
              arr(ncurr+1) = curr_tile%part_uz(ip)
              ncurr = ncurr+1
            END IF
          END DO
        CASE (7)! weight
          DO ip=1, count
            np = np+1
            IF (mask(np)) THEN
              arr(ncurr+1) = curr_tile%pid(ip, wpid)
              ncurr = ncurr+1
            END IF
          END DO
        END SELECT
      ENDIF
    END DO
  END DO
END DO!END LOOP ON TILES

END SUBROUTINE concatenate_particle_variable

! ________________________________________________________________________________________
!> @brief
!> This subroutine writes a particle array property (e.g x, y, z, px etc.)
!> in the file  of file handler fh. The array is appended at offset (in bytes) in fh.
!
!> @author
!> Henri Vincenti
!
!> @date
!> Creation 2015
! ________________________________________________________________________________________
SUBROUTINE write_particle_variable(fh, array, narr, mpitype, err, offset)
INTEGER(isp), INTENT(IN) :: fh
INTEGER(idp), INTENT(IN) :: narr
REAL(num), DIMENSION(narr), INTENT(IN) :: array
INTEGER(idp), INTENT(IN) :: offset
INTEGER(isp), INTENT(IN) :: mpitype
INTEGER(isp), INTENT(INOUT) :: err

CALL MPI_FILE_SET_VIEW(fh, offset, MPI_BYTE, mpitype, 'native', MPI_INFO_NULL, err)

CALL MPI_FILE_WRITE_ALL(fh, array, INT(narr, isp), mpitype, MPI_STATUS_IGNORE, err)

END SUBROUTINE write_particle_variable

END MODULE simple_io
